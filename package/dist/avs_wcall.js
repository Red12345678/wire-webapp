"use strict";
/*
 * Wire
 * Copyright (C) 2016 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/* DO NOT edit this file by hand. It is generated by the AVS make
   system and any changes you make will be lost.
*/
var avs_core_js_1 = require("./avs_core.js");
var avs_pc_js_1 = require("./avs_pc.js");
var LOG_LEVEL;
(function (LOG_LEVEL) {
    LOG_LEVEL[LOG_LEVEL["DEBUG"] = 0] = "DEBUG";
    LOG_LEVEL[LOG_LEVEL["INFO"] = 1] = "INFO";
    LOG_LEVEL[LOG_LEVEL["WARN"] = 2] = "WARN";
    LOG_LEVEL[LOG_LEVEL["ERROR"] = 3] = "ERROR";
})(LOG_LEVEL = exports.LOG_LEVEL || (exports.LOG_LEVEL = {}));
var CONV_TYPE;
(function (CONV_TYPE) {
    CONV_TYPE[CONV_TYPE["ONEONONE"] = 0] = "ONEONONE";
    CONV_TYPE[CONV_TYPE["GROUP"] = 1] = "GROUP";
    CONV_TYPE[CONV_TYPE["CONFERENCE"] = 2] = "CONFERENCE";
})(CONV_TYPE = exports.CONV_TYPE || (exports.CONV_TYPE = {}));
var STATE;
(function (STATE) {
    STATE[STATE["NONE"] = 0] = "NONE";
    STATE[STATE["OUTGOING"] = 1] = "OUTGOING";
    STATE[STATE["INCOMING"] = 2] = "INCOMING";
    STATE[STATE["ANSWERED"] = 3] = "ANSWERED";
    STATE[STATE["MEDIA_ESTAB"] = 4] = "MEDIA_ESTAB";
    STATE[STATE["TERM_LOCAL"] = 6] = "TERM_LOCAL";
    STATE[STATE["TERM_REMOTE"] = 7] = "TERM_REMOTE";
    STATE[STATE["UNKNOWN"] = 8] = "UNKNOWN";
})(STATE = exports.STATE || (exports.STATE = {}));
var REASON;
(function (REASON) {
    REASON[REASON["NORMAL"] = 0] = "NORMAL";
    REASON[REASON["ERROR"] = 1] = "ERROR";
    REASON[REASON["TIMEOUT"] = 2] = "TIMEOUT";
    REASON[REASON["LOST_MEDIA"] = 3] = "LOST_MEDIA";
    REASON[REASON["CANCELED"] = 4] = "CANCELED";
    REASON[REASON["ANSWERED_ELSEWHERE"] = 5] = "ANSWERED_ELSEWHERE";
    REASON[REASON["IO_ERROR"] = 6] = "IO_ERROR";
    REASON[REASON["STILL_ONGOING"] = 7] = "STILL_ONGOING";
    REASON[REASON["TIMEOUT_ECONN"] = 8] = "TIMEOUT_ECONN";
    REASON[REASON["DATACHANNEL"] = 9] = "DATACHANNEL";
    REASON[REASON["REJECTED"] = 10] = "REJECTED";
})(REASON = exports.REASON || (exports.REASON = {}));
var VIDEO_STATE;
(function (VIDEO_STATE) {
    VIDEO_STATE[VIDEO_STATE["STOPPED"] = 0] = "STOPPED";
    VIDEO_STATE[VIDEO_STATE["STARTED"] = 1] = "STARTED";
    VIDEO_STATE[VIDEO_STATE["BAD_CONN"] = 2] = "BAD_CONN";
    VIDEO_STATE[VIDEO_STATE["PAUSED"] = 3] = "PAUSED";
    VIDEO_STATE[VIDEO_STATE["SCREENSHARE"] = 4] = "SCREENSHARE";
})(VIDEO_STATE = exports.VIDEO_STATE || (exports.VIDEO_STATE = {}));
var ENV;
(function (ENV) {
    ENV[ENV["DEFAULT"] = 0] = "DEFAULT";
    ENV[ENV["FIREFOX"] = 1] = "FIREFOX";
})(ENV = exports.ENV || (exports.ENV = {}));
var ERROR;
(function (ERROR) {
    ERROR[ERROR["NO_MEMORY"] = 12] = "NO_MEMORY";
    ERROR[ERROR["INVALID"] = 22] = "INVALID";
    ERROR[ERROR["TIMED_OUT"] = 110] = "TIMED_OUT";
    ERROR[ERROR["ALREADY"] = 114] = "ALREADY";
    ERROR[ERROR["UNKNOWN_PROTOCOL"] = 1000] = "UNKNOWN_PROTOCOL";
})(ERROR = exports.ERROR || (exports.ERROR = {}));
var CALL_TYPE;
(function (CALL_TYPE) {
    CALL_TYPE[CALL_TYPE["NORMAL"] = 0] = "NORMAL";
    CALL_TYPE[CALL_TYPE["VIDEO"] = 1] = "VIDEO";
    CALL_TYPE[CALL_TYPE["FORCED_AUDIO"] = 2] = "FORCED_AUDIO";
})(CALL_TYPE = exports.CALL_TYPE || (exports.CALL_TYPE = {}));
var QUALITY;
(function (QUALITY) {
    QUALITY[QUALITY["NORMAL"] = 1] = "NORMAL";
    QUALITY[QUALITY["MEDIUM"] = 2] = "MEDIUM";
    QUALITY[QUALITY["POOR"] = 3] = "POOR";
})(QUALITY = exports.QUALITY || (exports.QUALITY = {}));
var instance;
var logFn;
var logHandler = function (level, msg) {
    if (logFn)
        logFn(level, msg, 0);
    else
        console.log(msg);
};
var Wcall = /** @class */ (function () {
    function Wcall(em_module) {
        this.em_module = em_module;
    }
    Wcall.prototype.init = function (env) {
        avs_pc_js_1.default.init(this.em_module, logHandler);
        this.em_module.ccall("wcall_setup", "number", [], []);
        return this.em_module.ccall("wcall_init", "number", ["number"], [env]);
    };
    Wcall.prototype.close = function () {
        this.em_module.ccall("wcall_close", "null", [], []);
    };
    Wcall.prototype.create = function (userid, clientid, readyh, sendh, incomingh, missedh, answerh, estabh, closeh, metricsh, cfg_reqh, acbrh, vstateh, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_readyh = this.em_module.addFunction(function (version, arg) {
            if (readyh) {
                readyh(version, arg);
            }
        }, "vnn");
        var fn_sendh = this.em_module.addFunction(function (ctx, convid, userid_self, clientid_self, userid_dest, clientid_dest, data, len, trans, arg) {
            if (sendh) {
                return sendh(ctx, convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid_self == 0 ? null : _this.em_module.UTF8ToString(userid_self), clientid_self == 0
                    ? null
                    : _this.em_module.UTF8ToString(clientid_self), userid_dest == 0 ? null : _this.em_module.UTF8ToString(userid_dest), clientid_dest == 0
                    ? null
                    : _this.em_module.UTF8ToString(clientid_dest), data == 0 ? null : _this.em_module.UTF8ToString(data), len, trans, arg);
            }
            return null;
        }, "nnssssssnnn");
        var fn_incomingh = this.em_module.addFunction(function (convid, msg_time, userid, video_call, should_ring, arg) {
            if (incomingh) {
                incomingh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), msg_time, userid == 0 ? null : _this.em_module.UTF8ToString(userid), video_call, should_ring, arg);
            }
        }, "vsnsnnn");
        var fn_missedh = this.em_module.addFunction(function (convid, msg_time, userid, video_call, arg) {
            if (missedh) {
                missedh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), msg_time, userid == 0 ? null : _this.em_module.UTF8ToString(userid), video_call, arg);
            }
        }, "vsnsnn");
        var fn_answerh = this.em_module.addFunction(function (convid, arg) {
            if (answerh) {
                answerh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), arg);
            }
        }, "vsn");
        var fn_estabh = this.em_module.addFunction(function (convid, userid, arg) {
            if (estabh) {
                estabh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vssn");
        var fn_closeh = this.em_module.addFunction(function (reason, convid, msg_time, userid, arg) {
            if (closeh) {
                closeh(reason, convid == 0 ? null : _this.em_module.UTF8ToString(convid), msg_time, userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vnsnsn");
        var fn_metricsh = this.em_module.addFunction(function (convid, metrics_json, arg) {
            if (metricsh) {
                metricsh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), metrics_json == 0
                    ? null
                    : _this.em_module.UTF8ToString(metrics_json), arg);
            }
        }, "vssn");
        var fn_cfg_reqh = this.em_module.addFunction(function (wuser, arg) {
            if (cfg_reqh) {
                return cfg_reqh(wuser, arg);
            }
            return null;
        }, "nnn");
        var fn_acbrh = this.em_module.addFunction(function (userid, enabled, arg) {
            if (acbrh) {
                acbrh(userid == 0 ? null : _this.em_module.UTF8ToString(userid), enabled, arg);
            }
        }, "vsnn");
        var fn_vstateh = this.em_module.addFunction(function (convid, userid, clientid, state, arg) {
            if (vstateh) {
                vstateh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid == 0 ? null : _this.em_module.UTF8ToString(userid), clientid == 0 ? null : _this.em_module.UTF8ToString(clientid), state, arg);
            }
        }, "vsssnn");
        return this.em_module.ccall("wcall_create", "number", [
            "string",
            "string",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number"
        ], [
            userid,
            clientid,
            fn_readyh,
            fn_sendh,
            fn_incomingh,
            fn_missedh,
            fn_answerh,
            fn_estabh,
            fn_closeh,
            fn_metricsh,
            fn_cfg_reqh,
            fn_acbrh,
            fn_vstateh,
            arg
        ]);
    };
    Wcall.prototype.createEx = function (userid, clientid, use_mediamgr, msys_name, readyh, sendh, sfth, incomingh, missedh, answerh, estabh, closeh, metricsh, cfg_reqh, acbrh, vstateh, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_readyh = this.em_module.addFunction(function (version, arg) {
            if (readyh) {
                readyh(version, arg);
            }
        }, "vnn");
        var fn_sendh = this.em_module.addFunction(function (ctx, convid, userid_self, clientid_self, userid_dest, clientid_dest, data, len, trans, arg) {
            if (sendh) {
                return sendh(ctx, convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid_self == 0 ? null : _this.em_module.UTF8ToString(userid_self), clientid_self == 0
                    ? null
                    : _this.em_module.UTF8ToString(clientid_self), userid_dest == 0 ? null : _this.em_module.UTF8ToString(userid_dest), clientid_dest == 0
                    ? null
                    : _this.em_module.UTF8ToString(clientid_dest), data == 0 ? null : _this.em_module.UTF8ToString(data), len, trans, arg);
            }
            return null;
        }, "nnssssssnnn");
        var fn_sfth = this.em_module.addFunction(function (ctx, url, data, len, arg) {
            if (sfth) {
                return sfth(ctx, url == 0 ? null : _this.em_module.UTF8ToString(url), data == 0 ? null : _this.em_module.UTF8ToString(data), len, arg);
            }
            return null;
        }, "nnssnn");
        var fn_incomingh = this.em_module.addFunction(function (convid, msg_time, userid, video_call, should_ring, arg) {
            if (incomingh) {
                incomingh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), msg_time, userid == 0 ? null : _this.em_module.UTF8ToString(userid), video_call, should_ring, arg);
            }
        }, "vsnsnnn");
        var fn_missedh = this.em_module.addFunction(function (convid, msg_time, userid, video_call, arg) {
            if (missedh) {
                missedh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), msg_time, userid == 0 ? null : _this.em_module.UTF8ToString(userid), video_call, arg);
            }
        }, "vsnsnn");
        var fn_answerh = this.em_module.addFunction(function (convid, arg) {
            if (answerh) {
                answerh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), arg);
            }
        }, "vsn");
        var fn_estabh = this.em_module.addFunction(function (convid, userid, arg) {
            if (estabh) {
                estabh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vssn");
        var fn_closeh = this.em_module.addFunction(function (reason, convid, msg_time, userid, arg) {
            if (closeh) {
                closeh(reason, convid == 0 ? null : _this.em_module.UTF8ToString(convid), msg_time, userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vnsnsn");
        var fn_metricsh = this.em_module.addFunction(function (convid, metrics_json, arg) {
            if (metricsh) {
                metricsh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), metrics_json == 0
                    ? null
                    : _this.em_module.UTF8ToString(metrics_json), arg);
            }
        }, "vssn");
        var fn_cfg_reqh = this.em_module.addFunction(function (wuser, arg) {
            if (cfg_reqh) {
                return cfg_reqh(wuser, arg);
            }
            return null;
        }, "nnn");
        var fn_acbrh = this.em_module.addFunction(function (userid, enabled, arg) {
            if (acbrh) {
                acbrh(userid == 0 ? null : _this.em_module.UTF8ToString(userid), enabled, arg);
            }
        }, "vsnn");
        var fn_vstateh = this.em_module.addFunction(function (convid, userid, clientid, state, arg) {
            if (vstateh) {
                vstateh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid == 0 ? null : _this.em_module.UTF8ToString(userid), clientid == 0 ? null : _this.em_module.UTF8ToString(clientid), state, arg);
            }
        }, "vsssnn");
        return this.em_module.ccall("wcall_create_ex", "number", [
            "string",
            "string",
            "number",
            "string",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number"
        ], [
            userid,
            clientid,
            use_mediamgr,
            msys_name,
            fn_readyh,
            fn_sendh,
            fn_sfth,
            fn_incomingh,
            fn_missedh,
            fn_answerh,
            fn_estabh,
            fn_closeh,
            fn_metricsh,
            fn_cfg_reqh,
            fn_acbrh,
            fn_vstateh,
            arg
        ]);
    };
    Wcall.prototype.setShutdownHandler = function (wuser, shuth, arg) {
        if (arg === void 0) { arg = 0; }
        var fn_shuth = this.em_module.addFunction(function (wuser, arg) {
            if (shuth) {
                shuth(wuser, arg);
            }
        }, "vnn");
        this.em_module.ccall("wcall_set_shutdown_handler", "null", ["number", "number", "number"], [wuser, fn_shuth, arg]);
    };
    Wcall.prototype.destroy = function (wuser) {
        this.em_module.ccall("wcall_destroy", "null", ["number"], [wuser]);
    };
    Wcall.prototype.setTrace = function (wuser, trace) {
        this.em_module.ccall("wcall_set_trace", "null", ["number", "number"], [wuser, trace]);
    };
    Wcall.prototype.start = function (wuser, convid, call_type, conv_type, audio_cbr) {
        return this.em_module.ccall("wcall_start", "number", ["number", "string", "number", "number", "number"], [wuser, convid, call_type, conv_type, audio_cbr]);
    };
    Wcall.prototype.startEx = function (wuser, convid, sft_url, sft_token, call_type, conv_type, audio_cbr, extcodec_arg) {
        return this.em_module.ccall("wcall_start_ex", "number", [
            "number",
            "string",
            "string",
            "string",
            "number",
            "number",
            "number",
            "number"
        ], [
            wuser,
            convid,
            sft_url,
            sft_token,
            call_type,
            conv_type,
            audio_cbr,
            extcodec_arg
        ]);
    };
    Wcall.prototype.confStart = function (wuser, convid, sft_url, sft_token, call_type, audio_cbr) {
        return this.em_module.ccall("wcall_conf_start", "number", ["number", "string", "string", "string", "number", "number"], [wuser, convid, sft_url, sft_token, call_type, audio_cbr]);
    };
    Wcall.prototype.answer = function (wuser, convid, call_type, audio_cbr) {
        return this.em_module.ccall("wcall_answer", "number", ["number", "string", "number", "number"], [wuser, convid, call_type, audio_cbr]);
    };
    Wcall.prototype.answerEx = function (wuser, convid, sft_url, sft_token, call_type, audio_cbr, extcodec_arg) {
        return this.em_module.ccall("wcall_answer_ex", "number", ["number", "string", "string", "string", "number", "number", "number"], [wuser, convid, sft_url, sft_token, call_type, audio_cbr, extcodec_arg]);
    };
    Wcall.prototype.confAnswer = function (wuser, convid, sft_url, sft_token, call_type, audio_cbr) {
        return this.em_module.ccall("wcall_conf_answer", "number", ["number", "string", "string", "string", "number", "number"], [wuser, convid, sft_url, sft_token, call_type, audio_cbr]);
    };
    Wcall.prototype.resp = function (wuser, status, reason, ctx) {
        this.em_module.ccall("wcall_resp", "null", ["number", "number", "string", "number"], [wuser, status, reason, ctx]);
    };
    Wcall.prototype.configUpdate = function (wuser, err, json_str) {
        this.em_module.ccall("wcall_config_update", "null", ["number", "number", "string"], [wuser, err, json_str]);
    };
    Wcall.prototype.sftResp = function (wuser, perr, buf, len, ctx) {
        this.em_module.ccall("wcall_sft_resp", "null", ["number", "number", "string", "number", "number"], [wuser, perr, buf, len, ctx]);
    };
    Wcall.prototype.recvMsg = function (wuser, buf, len, curr_time, msg_time, convid, userid, clientid) {
        return this.em_module.ccall("wcall_recv_msg", "number", [
            "number",
            "string",
            "number",
            "number",
            "number",
            "string",
            "string",
            "string"
        ], [wuser, buf, len, curr_time, msg_time, convid, userid, clientid]);
    };
    Wcall.prototype.end = function (wuser, convid) {
        this.em_module.ccall("wcall_end", "null", ["number", "string"], [wuser, convid]);
    };
    Wcall.prototype.reject = function (wuser, convid) {
        return this.em_module.ccall("wcall_reject", "number", ["number", "string"], [wuser, convid]);
    };
    Wcall.prototype.isVideoCall = function (wuser, convid) {
        return this.em_module.ccall("wcall_is_video_call", "number", ["number", "string"], [wuser, convid]);
    };
    Wcall.prototype.setMediaEstabHandler = function (wuser, mestabh) {
        var _this = this;
        var fn_mestabh = this.em_module.addFunction(function (convid, peer, userid, arg) {
            if (mestabh) {
                mestabh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), peer, userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vsnsn");
        this.em_module.ccall("wcall_set_media_estab_handler", "null", ["number", "number"], [wuser, fn_mestabh]);
    };
    Wcall.prototype.setMediaStoppedHandler = function (wuser, mstoph) {
        var _this = this;
        var fn_mstoph = this.em_module.addFunction(function (convid, arg) {
            if (mstoph) {
                mstoph(convid == 0 ? null : _this.em_module.UTF8ToString(convid), arg);
            }
        }, "vsn");
        this.em_module.ccall("wcall_set_media_stopped_handler", "null", ["number", "number"], [wuser, fn_mstoph]);
    };
    Wcall.prototype.setDataChanEstabHandler = function (wuser, dcestabh) {
        var _this = this;
        var fn_dcestabh = this.em_module.addFunction(function (convid, userid, arg) {
            if (dcestabh) {
                dcestabh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vssn");
        this.em_module.ccall("wcall_set_data_chan_estab_handler", "null", ["number", "number"], [wuser, fn_dcestabh]);
    };
    Wcall.prototype.setExtcodecArg = function (wuser, peer, convid, userid, arg) {
        if (arg === void 0) { arg = 0; }
        this.em_module.ccall("wcall_set_extcodec_arg", "null", ["number", "number", "string", "string", "number"], [wuser, peer, convid, userid, arg]);
    };
    Wcall.prototype.setVideoSendState = function (wuser, convid, state) {
        this.em_module.ccall("wcall_set_video_send_state", "null", ["number", "string", "number"], [wuser, convid, state]);
    };
    Wcall.prototype.setVideoHandlers = function (render_frame_h, size_h, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_size_h = this.em_module.addFunction(function (w, h, userid, arg) {
            if (size_h) {
                size_h(w, h, userid == 0 ? null : _this.em_module.UTF8ToString(userid), arg);
            }
        }, "vnnsn");
        this.em_module.ccall("wcall_set_video_handlers", "null", ["wcall_render_frame_h*", "number", "number"], [render_frame_h, fn_size_h, arg]);
    };
    Wcall.prototype.networkChanged = function (wuser) {
        this.em_module.ccall("wcall_network_changed", "null", ["number"], [wuser]);
    };
    Wcall.prototype.setGroupChangedHandler = function (wuser, chgh, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_chgh = this.em_module.addFunction(function (convid, arg) {
            if (chgh) {
                chgh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), arg);
            }
        }, "vsn");
        this.em_module.ccall("wcall_set_group_changed_handler", "null", ["number", "number", "number"], [wuser, fn_chgh, arg]);
    };
    Wcall.prototype.setParticipantChangedHandler = function (wuser, chgh, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_chgh = this.em_module.addFunction(function (convid, mjson, arg) {
            if (chgh) {
                chgh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), mjson == 0 ? null : _this.em_module.UTF8ToString(mjson), arg);
            }
        }, "vssn");
        this.em_module.ccall("wcall_set_participant_changed_handler", "null", ["number", "number", "number"], [wuser, fn_chgh, arg]);
    };
    Wcall.prototype.setNetworkQualityHandler = function (wuser, netqh, interval, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_netqh = this.em_module.addFunction(function (convid, userid, quality, rtt, uploss, downloss, arg) {
            if (netqh) {
                netqh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), userid == 0 ? null : _this.em_module.UTF8ToString(userid), quality, rtt, uploss, downloss, arg);
            }
        }, "vssnnnnn");
        return this.em_module.ccall("wcall_set_network_quality_handler", "number", ["number", "number", "number", "number"], [wuser, fn_netqh, interval, arg]);
    };
    Wcall.prototype.setLogHandler = function (logh, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_logh = this.em_module.addFunction(function (level, msg, arg) {
            if (logh) {
                logh(level, msg == 0 ? null : _this.em_module.UTF8ToString(msg), arg);
            }
        }, "vnsn");
        logFn = logh;
        this.em_module.ccall("wcall_set_log_handler", "null", ["number", "number"], [fn_logh, arg]);
    };
    Wcall.prototype.getMute = function (wuser) {
        return this.em_module.ccall("wcall_get_mute", "number", ["number"], [wuser]);
    };
    Wcall.prototype.setMute = function (wuser, muted) {
        this.em_module.ccall("wcall_set_mute", "null", ["number", "number"], [wuser, muted]);
    };
    Wcall.prototype.setMuteHandler = function (wuser, muteh, arg) {
        if (arg === void 0) { arg = 0; }
        var fn_muteh = this.em_module.addFunction(function (muted, arg) {
            if (muteh) {
                muteh(muted, arg);
            }
        }, "vnn");
        this.em_module.ccall("wcall_set_mute_handler", "null", ["number", "number", "number"], [wuser, fn_muteh, arg]);
    };
    Wcall.prototype.setStateHandler = function (wuser, stateh) {
        var _this = this;
        var fn_stateh = this.em_module.addFunction(function (convid, state, arg) {
            if (stateh) {
                stateh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), state, arg);
            }
        }, "vsnn");
        this.em_module.ccall("wcall_set_state_handler", "null", ["number", "number"], [wuser, fn_stateh]);
    };
    Wcall.prototype.getState = function (wuser, convid) {
        return this.em_module.ccall("wcall_get_state", "number", ["number", "string"], [wuser, convid]);
    };
    Wcall.prototype.iterateState = function (wuser, stateh, arg) {
        var _this = this;
        if (arg === void 0) { arg = 0; }
        var fn_stateh = this.em_module.addFunction(function (convid, state, arg) {
            if (stateh) {
                stateh(convid == 0 ? null : _this.em_module.UTF8ToString(convid), state, arg);
            }
        }, "vsnn");
        this.em_module.ccall("wcall_iterate_state", "null", ["number", "number", "number"], [wuser, fn_stateh, arg]);
    };
    Wcall.prototype.propsyncRequest = function (wuser, convid) {
        this.em_module.ccall("wcall_propsync_request", "null", ["number", "string"], [wuser, convid]);
    };
    Wcall.prototype.freeMembersJson = function (members) {
        this.em_module.ccall("wcall_free_members_json", "null", ["string"], [members]);
    };
    Wcall.prototype.enablePrivacy = function (wuser, enabled) {
        this.em_module.ccall("wcall_enable_privacy", "null", ["number", "number"], [wuser, enabled]);
    };
    Wcall.prototype.setReqClientsHandler = function (wuser, reqch) {
        var _this = this;
        var fn_reqch = this.em_module.addFunction(function (convid, arg) {
            if (reqch) {
                reqch(convid == 0 ? null : _this.em_module.UTF8ToString(convid), arg);
            }
        }, "vsn");
        this.em_module.ccall("wcall_set_req_clients_handler", "null", ["number", "number"], [wuser, fn_reqch]);
    };
    Wcall.prototype.setClientsForConv = function (wuser, convid, carray, clen) {
        return this.em_module.ccall("wcall_set_clients_for_conv", "number", ["number", "string", "string", "number"], [wuser, convid, carray, clen]);
    };
    Wcall.prototype.poll = function () {
        this.em_module.ccall("wcall_poll", "null", [], []);
    };
    Wcall.prototype.setUserMediaHandler = function (userMediaHandler) {
        avs_pc_js_1.default.setUserMediaHandler(userMediaHandler);
    };
    Wcall.prototype.setVideoTrackHandler = function (videoTrackHandler) {
        avs_pc_js_1.default.setVideoTrackHandler(videoTrackHandler);
    };
    Wcall.prototype.replaceTrack = function (convid, newTrack) {
        avs_pc_js_1.default.replaceTrack(convid, newTrack);
    };
    return Wcall;
}());
exports.Wcall = Wcall;
exports.getAvsInstance = function () {
    if (instance) {
        return Promise.resolve(instance);
    }
    return new Promise(function (resolve) {
        avs_core_js_1.default().then(function (em_module) {
            resolve(new Wcall(em_module));
        });
    });
};
